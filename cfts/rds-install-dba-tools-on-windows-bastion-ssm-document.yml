AWSTemplateFormatVersion: 2010-09-09
Description: Template for creating SSM command document that will install DBA tools
Parameters:
  ToolLocationS3Bucket:
    Type: String
    Description: Bucket where DBA tools are located
    Default: "delta-rds-artifacts-us-east-1"
  ToolLocationS3KeyPrefix:
    Type: String
    Description: Folder location in S3 bucket where DBA tools are located
    Default: "database/tools/"
Resources:
    InstallDBAToolsSSMDocument:
        Type: AWS::SSM::Document
        Properties:
            DocumentType: Command
            Name: 'DL-windows-dba-tools-install'
            Content :
              {
                "schemaVersion": "2.2",
                "description": "Command document that will install dba tools on windows box",
                "parameters":{
                  "ToolsS3BucketName":{
                  "type": "String",
                  "description":"S3 bucket name where the tools are located",
                  "default" : {"Ref":"ToolLocationS3Bucket"}
                  },
                  "ToolsS3KeyName":{
                  "type": "String",
                  "description":"Key name inside S3 bucket where the tools are located",
                  "default" : {"Ref":"ToolLocationS3KeyPrefix"}
                  }
                },
                "mainSteps": [
                  {
                    "action": "aws:runPowerShellScript",
                    "name": "example",
                    "inputs": {
                      "runCommand": [ 
                        "  Clear-Host",
                        "  ",
                        "  $LogFileName = \"$(Get-Date -Format MMddyyyyhhmmss)-dba-tool-install-ssm.log\"",
                        "  Start-Transcript -Path \"C:\\ssmlogs\\$LogFileName\" -Force -Append -NoClobber",
                        "  ",
                        "  $PackageDownloadFolderName = \"windows-pkgs\"",
                        "  $DBAPackagesS3BucketLocation = \"{{ToolsS3BucketName}}\"",
                        "  $DBAPackagesS3KeyPrefix = \"{{ToolsS3KeyName}}\"",
                        "  $DBAPackagesS3URI = \"s3://$DBAPackagesS3BucketLocation/$DBAPackagesS3KeyPrefix\"",
                        "  ",
                        "  ",
                        "  # lets get temp directory",
                        "  $TempDir = \"C:\\temp\"",
                        "  $TempExtractLocation = \"windows-pkgs-extract\"",
                        "  ",
                        "  ",
                        "  # construct the path where the dba related packages will be downloaded",
                        "  $PackageDownloadFolderPath = Join-Path -Path $TempDir -ChildPath $PackageDownloadFolderName",
                        "  ",
                        "  # construct the path where the dba related packages (archieve) will be extracted",
                        "  $PackageExtractFolderPath = Join-Path -Path $TempDir -ChildPath $TempExtractLocation",
                        "  ",
                        "  function CreateDirOnLocal($location)",
                        "  {",
                        "      New-Item -ItemType Directory -Force  -Path $location | Out-Null",
                        "      return Test-Path $location",
                        "  }",
                        "  ",
                        "  <#",
                        "      Extract a zip archieve",
                        "  #>",
                        "  function ExtractInasllerArchive($installer_archive_file_location, $extract_location)",
                        "  {",
                        "      Expand-Archive $installer_archive_file_location -DestinationPath $extract_location -Force",
                        "      return $true",
                        "  }",
                        "  ",
                        "  <#",
                        "      Check the number of files in the folder and returns one file.",
                        "      If there is only one file in the given folder, it is returned.",
                        "      If there are multiple files in the given folder, it returns the latest file based off of last modifled date",
                        "  #>",
                        "  function GetLatestInstallerFileFromDir($location)",
                        "  {",
                        "      Write-Host \"checking for the latest installer from location $location\"",
                        "      $number_of_files = (Get-ChildItem -File -Path $location | Measure-Object).Count",
                        "      if ($number_of_files -eq 1)",
                        "      {",
                        "          Write-Host \"There is only one file in $location. returning it\"",
                        "          return Get-ChildItem -File  -Path $location | Select-Object -ExpandProperty FullName",
                        "      }",
                        "      else",
                        "      {",
                        "          Write-Host \"There are multiple files in $location. finding the latest one and returning it\"",
                        "          return Get-ChildItem -File -Path $location | Sort-Object -Descending -Property LastWriteTime | Select -First 1 | Select-Object -ExpandProperty FullName",
                        "  ",
                        "      }",
                        "  ",
                        "  }",
                        "  ",
                        "  ",
                        "  ",
                        "  ",
                        "  Write-Host \"Creating directory $PackageDownloadFolderPath\"",
                        "  ",
                        "  #$res = Create-DirOnLocal($PackageDownloadFolderPath)",
                        "  #Write-Host $res",
                        "  ",
                        "  # create the directory where the dba related packages will be downloaded",
                        "  if(!(CreateDirOnLocal -location $PackageDownloadFolderPath))",
                        "  {",
                        "      Write-Error \"Failed to create directory at $PackageDownloadFolderPath. Script will exit now\"",
                        "      Exit",
                        "  }",
                        "  ",
                        "  Write-Host \"Creating directory $PackageExtractFolderPath\"",
                        "  # create the directory where the dba related packages will be extracted if they are compressed",
                        "  if(!(CreateDirOnLocal -location $PackageExtractFolderPath))",
                        "  {",
                        "      Write-Error \"Failed to create directory at $PackageExtractFolderPath. Script will exit now\"",
                        "      Exit",
                        "  }",
                        "  ",
                        "  ",
                        "  # now lets get the packages from S3 bucket and download them to local machine",
                        "  Write-Host \"Downloading DBA related packages from $DBAPackagesS3URI to $PackageDownloadFolderPath\"",
                        "  #Copy-S3Object -BucketName $DBAPackagesS3BucketLocation -KeyPrefix $DBAPackagesS3KeyLocation -LocalFolder .",
                        "  aws s3 sync $DBAPackagesS3URI $PackageDownloadFolderPath --quiet",
                        "  ",
                        "  # wait for couple of seconds so that syste has time to remove part files",
                        "  Start-Sleep -Seconds 5",
                        "  ",
                        "  Write-Host \"Downloaded DBA related packages from $DBAPackagesS3URI to $PackageDownloadFolderPath\"",
                        "  ",
                        "  # now lets get the latest installers if there are multiple installer files present in the directory",
                        "  $installable_tool_folders = Get-ChildItem -Recurse -Directory -Path $PackageDownloadFolderPath",
                        "  ",
                        "  foreach ($tool_folder in $installable_tool_folders)",
                        "  {",
                        "      $installer_file = GetLatestInstallerFileFromDir -location $tool_folder.FullName",
                        "  ",
                        "      Switch ($tool_folder.Name)",
                        "      {",
                        "          \"PgAdmin\"",
                        "          {",
                        "  ",
                        "              Write-Host \"installing pgAdmin tool using $installer_file\"",
                        "              Start-Process -Wait -FilePath $installer_file -ArgumentList \"/VERYSILENT\",\"/NORESTART\" -PassThru",
                        "              Write-Host \"finished installing pgAdmin tool\"",
                        "          }",
                        "          \"SchemaConversionTool\"",
                        "          {",
                        "  ",
                        "              Write-Host \"Extracting Schema Conversion tool using $installer_file\"",
                        "              $installer_file_name_base = Split-Path $installer_file -Leaf",
                        "              $archieve_folder_name = Join-Path -Path $PackageExtractFolderPath -ChildPath $installer_file_name_base",
                        "  ",
                        "              if(!(ExtractInasllerArchive -installer_archive_file_location $installer_file -extract_location $archieve_folder_name))",
                        "              {",
                        "                  Write-Error \"Unable to extract archive $installer_archive_file_location\"",
                        "                  continue",
                        "              }",
                        "              $installer_file_extracted = GetLatestInstallerFileFromDir -location $archieve_folder_name",
                        "              Write-Host \"Installing Schema Conversion tool using $installer_file_extracted\"",
                        "              #Start-Process  -Wait -FilePath \"$installer_file_extracted\" -ArgumentList \"/norestart\" -PassThru",
                        "              Install-Package \"$installer_file_extracted\"",
                        "          }",
                        "          \"SQLDeveloper\"",
                        "          {",
                        "  ",
                        "              Write-Host \"Extracting SQLDeveloper tool using $installer_file\"",
                        "              if(!(ExtractInasllerArchive -installer_archive_file_location $installer_file -extract_location \"C:\\SQLDeveloperTool\"))",
                        "              {",
                        "                  Write-Error \"Unable to extract archive $installer_file\"",
                        "                  continue",
                        "              }",
                        "              Write-Host \"Extracted SQLDeveloper tool\"",
                        "  ",
                        "          }",
                        "          \"SQLServerManagementStudio\"",
                        "          {",
                        "  ",
                        "              Write-Host \"installing SQLServerManagementStudio tool using $installer_file\"",
                        "              Start-Process -Wait -FilePath $installer_file -ArgumentList \"/Install\",\"/Quiet\",\"/Norestart\" -PassThru",
                        "              Write-Host \"finished installing SQLServerManagementStudio tool\"",
                        "          }",
                        "      }",
                        "  }",
                        "  ",
                        "  #Delete download and extract locations",
                        "  Write-Host \"Deleting temp download folder\"",
                        "  Remove-Item -Recurse -Force -Path $PackageDownloadFolderPath",
                        "  ",
                        "  Write-Host \"Deleting temp extract folder\"",
                        "  Remove-Item -Recurse -Force -Path $PackageExtractFolderPath",
                        "  ",
                        "  Write-Host \"Script execution completed\"",
                        "  ",
                        "  Stop-Transcript",
                        "  ",
                        "  "
                      ]
                    }
                  }
                ]
              }