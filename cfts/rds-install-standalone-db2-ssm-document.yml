AWSTemplateFormatVersion: 2010-09-09
Description: SSM command document that will install DB2
Parameters:
  Db2InstallArtifactsS3Bucket:
    Type: String
    Description: S3 Bucket name where DB2 install related artifacts are stored.
    Default: 'delta-rds-artifacts-us-east-1'
  Db2InstallerBinaryFileS3KeyName:
    Type: String
    Description: S3 Key path where DB2 installer binary is located
    Default: 'database/software-repository/db2/db2_11.5.6.13320'
  Db2InstallerBinaryFileOnS3:
    Type: String
    Description: DB2 installer binary file name on S3
    Default: 'special_13320_v11.5.6_linuxx64_universal_fixpack.tar.gz'
  Db2InstallerLicenseFileS3KeyName:
    Type: String
    Description: S3 Key path where DB2 license file is located
    Default: 'database/software-repository/db2/db2_11.5.6.13320'
  Db2InstallerLicenseFileName:
    Type: String
    Description: DB2 license file name
    Default: 'db2aese_c.lic'
  Db2InstallerResponseFileS3KeyName:
    Type: String
    Description: S3 Key path where DB2 response file is located
    Default: 'database/software-repository/db2/db2_11.5.6.13320'
  Db2InstallerResponseFileName:
    Type: String
    Description: DB2 response file name on S3
    Default: 'db2_install.rsp'
  Db2DownloadDir:
    Type: String
    Description: Local directory path where DB2 install related artifacts will be downloaded
    Default: '/products/software/udb/download'
  Db2Installdir:
    Type: String
    Description: Local directory path where DB2 will be installed
    Default: '/products/database/ibm/db2/v11.5.6.13320'
  Db2Tmpdir:
    Type: String
    Description: Local DB2 temp directory
    Default: '/products/tmp'
  Db2AdmGroup:
    Type: String
    Description: DB2 Admin Group
    Default: 'daldba'
  Db2AdmUser:
    Type: String
    Description: DB2 Admin User
    Default: 'daldba'
  Db2PortNum:
    Type: String
    Description: DB2 Port Number
    Default: '50085'
  Db2InstanceHomedir:
    Type: String
    Description: DB2 instance home directory
    Default: '/products/database/db2/admin'
  Db2FenceidHomedir:
    Type: String
    Description: DB2 Fence Id home directory. (FENCEID will be appended to the path specified)
    Default: '/products/database/db2'
  Db2ScriptsFolderS3KeyName:
    Type: String
    Description: S3 Key path where DB2 post scripts are located
    Default: 'database/scripts/db2-on-ec2-scripts/scripts'
  Db2ScriptsFolderLocalDownloadPath:
    Type: String
    Description: Local path where DB2 post scripts are downloaded
    Default: '/products/daldba/scripts/'
  Db2TemplatesFolderS3KeyName:
    Type: String
    Description: S3 Key path where DB2 post templates are located
    Default: 'database/scripts/db2-on-ec2-scripts/templates'
  Db2TemplatesFolderLocalDownloadPath:
    Type: String
    Description: Local path where DB2 post templates are downloaded
    Default: '/products/daldba/templates/'
  AdminMountPointPath:
    Type: String
    Description: Mount point path for Admin
    Default: '/products/database/db2/admin'
  DiagMountPointPath:
    Type: String
    Description: Mount point path for Diag
    Default: '/products/database/db2/diag'
  DataMountPointPath:
    Type: String
    Description: Mount point path for Data
    Default: '/products/database/db2/NODE0000'
  BackupMountPointPath:
    Type: String
    Description: Mount point path for Backup
    Default: '/products/database/db2/backup'
  DBNumber:
    Type: String
    Description: Database Number
    AllowedPattern: ^[0-9]{2}$
    Default: '01'
  CodePage:
    Type: String
    Description: Database Code Page
    AllowedValues: ["UTF-8","ISO8859-1","ISO8859-15","IBM-850"]
    Default: 'UTF-8'
  Territory:
    Type: String
    Description: Database Territory
    AllowedValues: ["US","CA","FR","ES","GB"]
    Default: 'US'
  DatabaseTimezone:
    Description: This is Database Timezone value. For migrate ensure this is same as the Source databases. EST- America/New_York, MST-America/Denver, CST- America/Chicago , PST- America/Los_Angeles
    Type: String
    Default: UTC
    AllowedValues: ['America/New_York','America/Chicago','America/Denver','America/Los_Angeles','UTC']
  LogRetention:
    Type: String
    Description: The length of time (in days) that you wish CloudWatch to retain the DB2 logs for.
    Default: "60"
    AllowedValues: [1,3,5,7,14,30,60,90,120,150,180,365,400,545,731,1827,3653]

# Mappings:
#   CodePageMap:
#     UTF-8:
#       "codepagevalue": "1208"
#     ISO8859-Latin-1:
#       "codepagevalue": "819"
#     ISO8859-15-Latin-15:
#       "codepagevalue": "923"
  
#   TerritoryMap:
#     en-US-English-US:
#       "territoryvalue": "01"
#     fr-CA-French-Canadian:
#       "territoryvalue": "02"
#     fr-FR-France:
#       "territoryvalue": "33"
#     ca-ES-Spanish:
#       "territoryvalue": "34"
#     en-GB-English-UK:
#       "territoryvalue": "44"

Resources:
  InstallDB2StandaloneSSMDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Command
      Name: "DL-DB-DB2-standalone-install"
      Content:
        {
          "schemaVersion": "2.2",
          "description": "Command document that will install DB2",
          "parameters":
            {
              "Db2InstallArtifactsS3Bucket":
                {
                  "type": "String",
                  "description": "S3 Bucket name where DB2 install related artifacts are stored.",
                  "default":
                    { "Ref": "Db2InstallArtifactsS3Bucket" },
                },
              "Db2InstallerBinaryFileS3KeyName":
                {
                  "type": "String",
                  "description": "S3 Key path where DB2 installer binary is located",
                  "default": { "Ref": "Db2InstallerBinaryFileS3KeyName" },
                },
              "Db2InstallerBinaryFileOnS3":
                {
                  "type": "String",
                  "description": "DB2 installer binary file name on S3",
                  "default":
                    {
                      "Ref": "Db2InstallerBinaryFileOnS3",
                    },
                },
              "Db2InstallerLicenseFileS3KeyName":
                {
                  "type": "String",
                  "description": "S3 Key path where DB2 license file is located",
                  "default":
                    { "Ref": "Db2InstallerLicenseFileS3KeyName" },
                },
              "Db2InstallerLicenseFileName":
                {
                  "type": "String",
                  "description": "DB2 license file name",
                  "default":
                    { "Ref": "Db2InstallerLicenseFileName" },
                },
              "Db2InstallerResponseFileS3KeyName":
                {
                  "type": "String",
                  "description": "S3 Key path where DB2 response file is located",
                  "default":
                    { "Ref": "Db2InstallerResponseFileS3KeyName" },
                },
              "Db2InstallerResponseFileName":
                {
                  "type": "String",
                  "description": "DB2 response file name on S3",
                  "default":
                    { "Ref": "Db2InstallerResponseFileName" },
                },
              "Db2DownloadDir":
                {
                  "type": "String",
                  "description": "Local directory path where DB2 install related artifacts will be downloaded",
                  "default":
                    { "Ref": "Db2DownloadDir" },
                },
              "Db2Installdir":
                {
                  "type": "String",
                  "description": "Local directory path where DB2 install related artifacts will be downloaded",
                  "default":
                    { "Ref": "Db2Installdir" },
                },
              "Db2Tmpdir":
                {
                  "type": "String",
                  "description": "Local DB2 temp directory",
                  "default":
                    { "Ref": "Db2Tmpdir" },
                },
              "Db2AdmGroup":
                {
                  "type": "String",
                  "description": "Db2 Admin Group",
                  "default":
                    { "Ref": "Db2AdmGroup" },
                },
              "Db2AdmUser":
                {
                  "type": "String",
                  "description": "DB2 Admin User",
                  "default":
                    { "Ref": "Db2AdmUser" },
                },
              "Db2PortNum":
                {
                  "type": "String",
                  "description": "DB2 Port Number",
                  "default":
                    { "Ref": "Db2PortNum" },
                },
              "Db2InstanceHomedir":
                {
                  "type": "String",
                  "description": "DB2 instance home directory",
                  "default": { "Ref": "Db2InstanceHomedir" },
                },
              "Db2FenceidHomedir":
                {
                  "type": "String",
                  "description": "DB2 Fence Id home directory. (FENCEID will be appended to the path specified)",
                  "default": { "Ref": "Db2FenceidHomedir" },
                },
              "Db2ScriptsFolderS3KeyName":
                {
                  "type": "String",
                  "description": "S3 Key path where DB2 post scripts are located",
                  "default": { "Ref": "Db2ScriptsFolderS3KeyName" },
                },
              "Db2ScriptsFolderLocalDownloadPath":
                {
                  "type": "String",
                  "description": "Local path where DB2 post scripts are downloaded",
                  "default": { "Ref": "Db2ScriptsFolderLocalDownloadPath" },
                },
              "Db2TemplatesFolderS3KeyName":
                {
                  "type": "String",
                  "description": "S3 Key path where DB2 post templates are located",
                  "default": { "Ref": "Db2TemplatesFolderS3KeyName" },
                },
              "Db2TemplatesFolderLocalDownloadPath":
                {
                  "type": "String",
                  "description": "Local path where DB2 post templates are downloaded",
                  "default": { "Ref": "Db2TemplatesFolderLocalDownloadPath" },
                },
              "AdminMountPointPath":
                {
                  "type": "String",
                  "description": "Mount point path for Admin",
                  "default": { "Ref": "AdminMountPointPath" },
                },
              "DiagMountPointPath":
                {
                  "type": "String",
                  "description": "Mount point path for Diag",
                  "default": { "Ref": "DiagMountPointPath" },
                },
              "DataMountPointPath":
                {
                  "type": "String",
                  "description": "Mount point path for Data",
                  "default": { "Ref": "DataMountPointPath" },
                },
              "BackupMountPointPath":
                {
                  "type": "String",
                  "description": "Mount point path for Backup",
                  "default": { "Ref": "BackupMountPointPath" },
                },
              "DBNumber":
                {
                  "type": "String",
                  "description": "Database Number",
                  "default": { "Ref": "DBNumber" },
                },
              "CodePage":
                {
                  "type": "String",
                  "description": "Database Code Page",
                  "default": { "Ref": "CodePage" },
                },
              "Territory":
                {
                  "type": "String",
                  "description": "Database Territory",
                  "default": { "Ref": "Territory" },
                },
              "DatabaseTimezone":
                {
                  "type": "String",
                  "description": "This is Database Timezone value. For migrate ensure this is same as the Source databases. EST- America/New_York, MST-America/Denver, CST- America/Chicago , PST- America/Los_Angeles",
                  "default": { "Ref": "DatabaseTimezone" },
                },
              "LogRetention":
                {
                  "type": "String",
                  "description": "The length of time (in days) that you wish CloudWatch to retain the DB2 logs for.",
                  "default": { "Ref": "LogRetention" },
                },
            },

          "mainSteps":
            [
              {
                "action": "aws:runShellScript",
                "name": "downloadscriptsandtemplates",
                "inputs": {
                  "runCommand": [
                    "#!/bin/bash",
                    "echo \"Downloading scripts and template folder\"",
                    "sudo aws s3 cp --quiet s3://{{Db2InstallArtifactsS3Bucket}}/{{Db2ScriptsFolderS3KeyName}}/ {{Db2ScriptsFolderLocalDownloadPath}} --recursive",
                    "sudo aws s3 cp --quiet s3://{{Db2InstallArtifactsS3Bucket}}/{{Db2TemplatesFolderS3KeyName}}/ {{Db2TemplatesFolderLocalDownloadPath}} --recursive",
                    "echo \"Downloaded scripts and template folder\"",
                  ]
                }
              },
              {
                "action": "aws:runShellScript",
                "name": "installdb2onec2",
                "inputs":
                  {
                    "runCommand":
                      [
                        "  #",
                        "  #Install and configure Db2 Standalone anvironment in AWS EC2 environment",
                        "  #",
                        "  ",
                        "  ## Variables for script control",
                        "  NOW=$(date +\"%Y%m%d_%H:%M:%S\")",
                        "  LOGFILE=db2_setup_${NOW}.out",
                        "  ERRFILE=db2_setup_${NOW}.err",
                        "  TEMPOUT=db2_setup_${NOW}.tmp",
                        "  ",
                        "  ",
                        "  ",
                        "  #############",
                        "  ## Functions",
                        "  #############",
                        "  ",
                        "  ",
                        "  PrintExecBanner ( )",
                        "  {",
                        "     # echo -e \"\\n########\" | tee -a ${TEMPOUT}",
                        "     # echo -e \"# EXECUTE - ${EXECMSG}\" | tee -a ${TEMPOUT}",
                        "     # echo -e \"########\\n\" | tee -a ${TEMPOUT}",
                        "  ",
                        "     echo -e \"\\n########\" | tee -a ${TEMPOUT}",
                        "     echo -e \"# EXECUTE - ${EXECMSG}\" | tee -a ${TEMPOUT}",
                        "     echo -e \"########\\n\" | tee -a ${TEMPOUT}",
                        "  ",
                        "     # echo -e \"\\n########\"",
                        "     # echo -e \"# EXECUTE - ${EXECMSG}\"",
                        "     # echo -e \"########\\n\"",
                        "  ",
                        "  }",
                        "  ",
                        "  ",
                        "  ",
                        "  CleanUpTemp ( )",
                        "  {",
                        "     # clean up TEMPOUT file",
                        "     if [[ -f ${TEMPOUT} ]]",
                        "     then",
                        "        rm ${TEMPOUT}",
                        "     fi",
                        "  }",
                        "  ",
                        "  ",
                        "  Check_RC ( )",
                        "  {",
                        "  ",
                        "     if [[ ${RC} -ne 0 ]]",
                        "     then",
                        "        echo -e \"!!!ERROR!!! - failed with error code : ${RC}\\n\" | tee -a ${TEMPOUT}",
                        "        #echo -e \"${ERRMSG}\\n\" | tee -a ${TEMPOUT}",
                        "        echo -e \"Exiting with errors... \\n\" | tee -a ${TEMPOUT}",
                        "        cat ${TEMPOUT} | tee -a ${LOGFILE}",
                        "        exit 99",
                        "     else",
                        "        echo -e \"COMPLETE \\n\" | tee -a ${TEMPOUT}",
                        "        cat ${TEMPOUT} | tee -a ${LOGFILE}",
                        "     fi",
                        "  ",
                        "     CleanUpTemp",
                        "  ",
                        "  }",
                        "  ",
                        "  # Check_RC ( )",
                        "  # {",
                        "  ",
                        "  #    if [[ ${RC} -ne 0 ]]",
                        "  #    then",
                        "  #       echo -e \"!!!ERROR!!! - failed with error code : ${RC}\\n\"",
                        "  #       echo -e \"Exiting with errors... \\n\"",
                        "  #       exit 99",
                        "  #    else",
                        "  #       echo -e \"COMPLETE \\n\"",
                        "  #    fi",
                        "  ",
                        "  #    CleanUpTemp",
                        "  ",
                        "  # }",
                        "  ",
                        "  Get_CF_Variables ( )",
                        "  {",
                        "  ",
                        "  CLOUDFORMATION_STACK_NAME_TAG_KEY=\"aws:cloudformation:stack-name\"",
                        "  PRODUCT_BLOCK_CODE_CFT_PARAM_NAME=\"productBlockCode\"",
                        "  ENVIRONMENT_TAG_KEY=\"Environment\"",
                        "  ",
                        "  # get ec2 instance id",
                        "  EC2_INSTANCE_ID=$(wget -q -O - http://169.254.169.254/latest/meta-data/instance-id)",
                        "  ",
                        "  if [[ -z \"${EC2_INSTANCE_ID}\" ]]",
                        "  then",
                        "      echo \"ec2 instance id fnot ound. Stopping the installation\" | tee -a ${LOGFILE}",
                        "      exit 99",
                        "  fi",
                        "  ",
                        "  echo \"ec2 instance id is $EC2_INSTANCE_ID\" | tee -a ${LOGFILE}",
                        "  ",
                        "  #now lets get all the tags for this ec2",
                        "  ",
                        "  ALL_TAGS=$(aws ec2 describe-tags --filters \"Name=resource-id,Values=$EC2_INSTANCE_ID\")",
                        "  ",
                        "  if [[ -z \"${ALL_TAGS}\" ]]",
                        "  then",
                        "      echo \"ec2 instance tags not found. Stopping the installation\" | tee -a ${LOGFILE}",
                        "      exit 99",
                        "  fi",
                        "  ",
                        "  echo \"ec2 instance tags found\" | tee -a ${LOGFILE}",
                        "  ",
                        "  # lets get CloudFormation stack name tag",
                        "  CLOUDFORMATION_STACK_NAME_TAG_VALUE=$(echo ${ALL_TAGS} | jq -r \".Tags[] | select(.Key == \\\"${CLOUDFORMATION_STACK_NAME_TAG_KEY}\\\") | .Value\")",
                        "  ",
                        "  if [[ -z \"${CLOUDFORMATION_STACK_NAME_TAG_VALUE}\" ]]",
                        "  then",
                        "      echo \"Cloudformation stack name tag value not found. Stopping the installation\" | tee -a ${LOGFILE}",
                        "      exit 99",
                        "  fi",
                        "  ",
                        "  echo \"Cloudformation stack name tag value is ${CLOUDFORMATION_STACK_NAME_TAG_VALUE}\" | tee -a ${LOGFILE}",
                        "  ",
                        "  # lets get CloudFormation stack based on CLOUDFORMATION_STACK_NAME_TAG_VALUE",
                        "  ",
                        "  CLOUDFORMATION_STACK=$(aws cloudformation describe-stacks --stack-name ${CLOUDFORMATION_STACK_NAME_TAG_VALUE})",
                        "  ",
                        "  if [[ -z \"${CLOUDFORMATION_STACK}\" ]]",
                        "  then",
                        "      echo \"Cloudformation stack not found. Stopping the installation\" | tee -a ${LOGFILE}",
                        "      exit 99",
                        "  fi",
                        "  ",
                        "  echo \"Cloudformation stack found\" | tee -a ${LOGFILE}",
                        "  ",
                        "  ",
                        "  # now lets get the parameters of CloudFormation Stack",
                        "  ",
                        "  CLOUDFORMATION_STACK_PARAMS=$(echo ${CLOUDFORMATION_STACK} | jq -r \".Stacks[].Parameters\")",
                        "  ",
                        "  if [[ -z \"${CLOUDFORMATION_STACK_PARAMS}\" ]]",
                        "  then",
                        "      echo \"Cloudformation stack params not found. Stopping the installation\" | tee -a ${LOGFILE}",
                        "      exit 99",
                        "  fi",
                        "  ",
                        "  echo \"Cloudformation stack params found\" | tee -a ${LOGFILE}",
                        "  ",
                        "  ",
                        "  # Now lets get productBlockCode param value",
                        "  ",
                        "  PRODUCT_BLOCK_CODE_CFT_PARAM_VALUE=$(echo ${CLOUDFORMATION_STACK_PARAMS} | jq -r \".[] | select(.ParameterKey == \\\"${PRODUCT_BLOCK_CODE_CFT_PARAM_NAME}\\\") | .ParameterValue\")",
                        "  ",
                        "  if [[ -z \"${PRODUCT_BLOCK_CODE_CFT_PARAM_VALUE}\" ]]",
                        "  then",
                        "      echo \"Product block code cft param value not found. Stopping the installation\" | tee -a ${LOGFILE}",
                        "      exit 99",
                        "  fi",
                        "  ",
                        "  echo \"Product block code cft param value is ${PRODUCT_BLOCK_CODE_CFT_PARAM_VALUE}\" | tee -a ${LOGFILE}",
                        "  ",
                        "  ",
                        "  LAST_4_LETTERS_OF_BLOCK_CODE_AS_IS=${PRODUCT_BLOCK_CODE_CFT_PARAM_VALUE: -4}",
                        "  ",
                        "  LAST_4_LETTERS_OF_BLOCK_CODE=\"${LAST_4_LETTERS_OF_BLOCK_CODE_AS_IS,,}\"",
                        "  ",
                        "  echo \"Last 4 letters of the Product block code are ${LAST_4_LETTERS_OF_BLOCK_CODE}\" | tee -a ${LOGFILE}",
                        "  ",
                        "  # now lets get Environment",
                        "  ENVIRONMENT_TAG_VALUE=$(echo ${ALL_TAGS} | jq -r \".Tags[] | select(.Key == \\\"${ENVIRONMENT_TAG_KEY}\\\") | .Value\")",
                        "  ",
                        "  if [[ -z \"${ENVIRONMENT_TAG_VALUE}\" ]]",
                        "  then",
                        "      echo \"Environment tag value not found. Stopping the installation\" | tee -a ${LOGFILE}",
                        "      exit 99",
                        "  fi",
                        "  ",
                        "  echo \"Environment tag value is ${ENVIRONMENT_TAG_VALUE}\" | tee -a ${LOGFILE}",
                        "  ",
                        "  # Now based on the environment, lets get one letter abbriviation",
                        "  ",
                        "  case $ENVIRONMENT_TAG_VALUE in",
                        "      \"dev\") ENVIRONMENT_ABBRIVIATION=\"d\";;",
                        "      \"si\") ENVIRONMENT_ABBRIVIATION=\"i\";;",
                        "      \"prd\") ENVIRONMENT_ABBRIVIATION=\"p\";;",
                        "      \"*\") ENVIRONMENT_ABBRIVIATION=\"\";;",
                        "  esac",
                        "  ",
                        "  if [[ -z \"${ENVIRONMENT_ABBRIVIATION}\" ]]",
                        "  then",
                        "      echo \"Environment abbriviation is invalid. Stopping the installation\" | tee -a ${LOGFILE}",
                        "      exit 99",
                        "  fi",
                        "  ",
                        "  echo \"Environment abbriviation is ${ENVIRONMENT_ABBRIVIATION}\" | tee -a ${LOGFILE}",
                        "  ",
                        "  ",
                        "  # IP Address, HostName, FQDN of the server",
                        "  ",
                        "  }",
                        "  ",
                        "  ",
                        "  ",
                        "  Yum_Install ( )",
                        "  {",
                        "  ",
                        "  # clean up TEMPOUT file",
                        "  CleanUpTemp",
                        "  ",
                        "  # Check if PKG is installed already",
                        "  yum list installed ${PKG}",
                        "  RC=$?",
                        "  ",
                        "  if [[ ! ${RC} = 0 ]]",
                        "  then",
                        "     # PKG is not installed so install it",
                        "     EXECMSG=\"yum install ${PKG} --quiet\"",
                        "     PrintExecBanner",
                        "  ",
                        "     sudo yum -y install ${PKG} --quiet| tee -a ${TEMPOUT} 2>&1",
                        "     RC=$?",
                        "     Check_RC",
                        "  else",
                        "     # PKG is already installed",
                        "     echo -e \"# COMPLETE - ALREADY INSTALLED - yum install ${PKG}\" | tee -a ${LOGFILE}",
                        "     CleanUpTemp",
                        "  fi",
                        "  ",
                        "  }",
                        "  ",
                        "  ",
                        "  ",
                        "  Yum_Update ()",
                        "  {",
                        "  ",
                        "     CleanUpTemp",
                        "  ",
                        "     EXECMSG=\"yum update\"",
                        "     PrintExecBanner",
                        "  ",
                        "     sudo yum -y update --quiet | tee -a ${TEMPOUT}",
                        "     RC=$?",
                        "     Check_RC",
                        "  ",
                        "  }",
                        "  ",
                        "  ",
                        "  ",
                        "  Start_NFS ()",
                        "  {",
                        "  ",
                        "     CleanUpTemp",
                        "  ",
                        "     EXECMSG=\"service nfs-server start\"",
                        "     PrintExecBanner",
                        "  ",
                        "     sudo service nfs-server start",
                        "     RC=$?",
                        "     Check_RC",
                        "  ",
                        "     EXECMSG=\"service nfs-server status\"",
                        "     PrintExecBanner",
                        "  ",
                        "     sudo service nfs-server status",
                        "     RC=$?",
                        "     Check_RC",
                        "  ",
                        "  }",
                        "  ",
                        "  ",
                        "  ",
                        "  CopyDb2Binaries ( )",
                        "  {",
                        "  ",
                        "     CleanUpTemp",
                        "  ",
                        "     EXECMSG=\"create Db2 Download Directory ${DB2_DOWNLOAD_DIR}\"",
                        "     PrintExecBanner",
                        "  ",
                        "     if [[ ! -d ${DB2_DOWNLOAD_DIR} ]]",
                        "     then",
                        "        sudo mkdir -p ${DB2_DOWNLOAD_DIR}",
                        "        RC=$?",
                        "        Check_RC",
                        "     fi",
                        "  ",
                        "     EXECMSG=\"S3 copy Db2 Install binaries to ${DB2_DOWNLOAD_DIR}\"",
                        "     PrintExecBanner",
                        "  ",
                        "     sudo aws s3 cp --quiet s3://${DB2_INSTALL_ARTIFACTS_S3_BUCKET}/${DB2_INSTALLER_BINARY_FILE_S3_KEY_NAME}/${DB2_INSTALLER_BINARY_FILE_ON_S3} ${DB2_DOWNLOAD_DIR}",
                        "     RC=$?",
                        "     Check_RC",
                        "  ",
                        "     sudo aws s3 cp --quiet s3://${DB2_INSTALL_ARTIFACTS_S3_BUCKET}/${DB2_INSTALLER_LICENSE_FILE_S3_KEY_NAME}/${DB2_INSTALLER_LICENSE_FILE_NAME} ${DB2_DOWNLOAD_DIR}",
                        "     RC=$?",
                        "     Check_RC",
                        "  ",
                        "     # sudo aws s3 cp --quiet s3://${DB2_INSTALL_ARTIFACTS_S3_BUCKET}/${DB2_INSTALLER_RESPONSE_FILE_S3_KEY_NAME}/${DB2_INSTALLER_RESPONSE_FILE_NAME} ${DB2_INSTALLDIR}",
                        "     # RC=$?",
                        "     # Check_RC",
                        "  ",
                        "  ",
                        "     # for FILE in ${DB2_INSTALLPKG} ${DB2_LICENSE} ${DB2_RESPONSE}",
                        "     # do",
                        "     #    sudo aws s3 cp s3://${DB2_INSTALL_ARTIFACTS_S3_BUCKET}/${FILE} ${DB2_INSTALLDIR}",
                        "     #    RC=$?",
                        "     #    Check_RC",
                        "     # done",
                        "  ",
                        "  }",
                        "  ",
                        "  ",
                        "  ",
                        "  GetDb2ResponseFile ( )",
                        "  {",
                        "  ",
                        "     CleanUpTemp",
                        "  ",
                        "     EXECMSG=\"S3 copy Db2 Response/Parameter file to ${DB2_DOWNLOAD_DIR}\"",
                        "     PrintExecBanner",
                        "  ",
                        "     sudo aws s3 cp --quiet s3://${DB2_INSTALL_ARTIFACTS_S3_BUCKET}/${DB2_INSTALLER_RESPONSE_FILE_S3_KEY_NAME}/${DB2_INSTALLER_RESPONSE_FILE_NAME} .",
                        "     RC=$?",
                        "     Check_RC",
                        "  ",
                        "  ",
                        "     # Parse Db2 Response file to get parameters needed to complete Db2 INSTALLED",
                        "     # DB2_INSTALLPKG=$(grep \"DB2_INSTALLPKG\" ./${DB2_RESPONSE} | -cut -d\"=\" -f2 | -sed -e 's/^ *//g' | cut -d\" \" -f1)",
                        "     # DB2_DOWNLOAD_DIR=$(grep \"DB2_DOWNLOAD_DIR\" ./${DB2_RESPONSE} | -cut -d\"=\" -f2 | -sed -e 's/^ *//g' | cut -d\" \" -f1)",
                        "     # DB2_TMPDIR=$(grep \"DB2_TMPDIR\" ./${DB2_RESPONSE} | -cut -d\"=\" -f2 | -sed -e 's/^ *//g' | cut -d\" \" -f1)",
                        "     # DB2_LICENSE=$(grep \"DB2_LICENSE\" ./${DB2_RESPONSE} | -cut -d\"=\" -f2 | -sed -e 's/^ *//g' | cut -d\" \" -f1)",
                        "     # DB2_ADM_GROUP=$(grep \"DB2_ADM_GROUP\" ./${DB2_RESPONSE} | -cut -d\"=\" -f2 | -sed -e 's/^ *//g' | cut -d\" \" -f1)",
                        "     # DB2_PORT_NUM=$(grep \"DB2_PORT_NUM\" ./${DB2_RESPONSE} | -cut -d\"=\" -f2 | -sed -e 's/^ *//g' | cut -d\" \" -f1)",
                        "  ",
                        "     EXECMSG=\"create directory to hold Db2 Install files - ${DB2_DOWNLOAD_DIR}\"",
                        "     PrintExecBanner",
                        "  ",
                        "     if [[ ! -d ${DB2_DOWNLOAD_DIR} ]]",
                        "     then",
                        "        sudo mkdir -p ${DB2_DOWNLOAD_DIR}",
                        "        RC=$?",
                        "        Check_RC",
                        "     else",
                        "        RC=0",
                        "        Check_RC",
                        "     fi",
                        "  ",
                        "  ",
                        "     EXECMSG=\"Convert Db2 Response file for installation\"",
                        "  ",
                        "     PrintExecBanner",
                        "  ",
                        "     # Perform Search/Replace to populate actual values in the Db2 Response file",
                        "     #    and place the updated file in the DB2_DOWNLOAD_DIR",
                        "  sudo sed \\",
                        "  \t-e \"s:db2inst1:${INSTID}:g \" \\",
                        "  \t-e \"s:db2fenc1:${FENCID}:g \" \\",
                        "  \t-e \"s:db2sysadm:${DB2_ADM_GROUP}:g \" \\",
                        "  \t-e \"s:portnum:{{Db2PortNum}}:g \" \\",
                        "  \t-e \"s:insthomedir:${DB2_INSTANCE_HOMEDIR}:g \" \\",
                        "     -e \"s:fencehomedir:${DB2_FENCEID_HOMEDIR}:g \" \\",
                        "     -e \"s:install_dir:${DB2_INSTALLDIR}:g \" \\",
                        "     -e \"s:default_dbdir:${DATA_MOUNT_POINT_PATH}:g \" \\",
                        "     -e \"s:diagdir:${DIAG_MOUNT_POINT_PATH}:g \" \\",
                        "  \t${DB2_INSTALLER_RESPONSE_FILE_NAME} > ${DB2_DOWNLOAD_DIR}/${DB2_INSTALLER_RESPONSE_FILE_NAME}",
                        "     RC=$?",
                        "     Check_RC",
                        "  ",
                        "  }",
                        "  ",
                        "  CreateUserIDs ( )",
                        "  {",
                        "  ",
                        "     EXECMSG=\"create Db2 group ids\"",
                        "     PrintExecBanner",
                        "  ",
                        "  ",
                        "     # Create groups with the same name as the Db2 Instance Id and Fence ID",
                        "     for CREATEGRP in ${INSTID} ${FENCID} {{Db2AdmGroup}}",
                        "     do",
                        "        if [[ $(getent group ${CREATEGRP}  | wc -l) -eq 0 ]]",
                        "        then",
                        "           sudo groupadd ${CREATEGRP}",
                        "           RC=$?",
                        "           Check_RC",
                        "        else",
                        "           echo -e \"Group ${CREATEGRP} already exists \\n\" | tee -a ${TEMPOUT}",
                        "           RC=0",
                        "           Check_RC",
                        "        fi",
                        "     done",
                        "  ",
                        "  # Create Db2 Instance Home Directory",
                        "  ",
                        "     EXECMSG=\"create ${DB2_INSTANCE_HOMEDIR}\"",
                        "     PrintExecBanner",
                        "  ",
                        "     if [[ ! -d ${DB2_INSTANCE_HOMEDIR} ]]",
                        "     then",
                        "        sudo mkdir -p ${DB2_INSTANCE_HOMEDIR}",
                        "        RC=$?",
                        "        Check_RC",
                        "     else",
                        "        RC=0",
                        "        Check_RC",
                        "     fi",
                        "  ",
                        "  ",
                        "  # Create Db2 FenceID Home Directory",
                        "  ",
                        "     EXECMSG=\"create ${DB2_FENCEID_HOMEDIR}\"",
                        "     PrintExecBanner",
                        "  ",
                        "     if [[ ! -d ${DB2_FENCEID_HOMEDIR} ]]",
                        "     then",
                        "        sudo mkdir -p ${DB2_FENCEID_HOMEDIR}",
                        "        RC=$?",
                        "        Check_RC",
                        "     else",
                        "        RC=0",
                        "        Check_RC",
                        "     fi",
                        "  ",
                        "  ",
                        "     EXECMSG=\"create Db2 user ids\"",
                        "     PrintExecBanner",
                        "  ",
                        "     # Create user id for the Db2 Instance Id",
                        "     if [[ $(id ${INSTID} | wc -l) -eq 0 ]]",
                        "     then",
                        "        echo \"sudo useradd -g {{Db2AdmGroup}} -G ${INSTID} -m -d ${DB2_INSTANCE_HOMEDIR} ${INSTID} -s /bin/ksh\"",
                        "        sudo useradd -g {{Db2AdmGroup}} -G ${INSTID} -m -d ${DB2_INSTANCE_HOMEDIR} ${INSTID} -s /bin/ksh",
                        "        RC=$?",
                        "        Check_RC",
                        "     else",
                        "        echo -e \"User ${INSTID} already exists \\n\" | tee -a ${TEMPOUT}",
                        "        RC=0",
                        "        Check_RC",
                        "     fi",
                        "  ",
                        "     # Create DB2 Admin User id for the ",
                        "     if [[ $(id {{Db2AdmUser}} | wc -l) -eq 0 ]]",
                        "     then",
                        "        echo \"sudo useradd -g {{Db2AdmGroup}} -G {{Db2AdmUser}} -m -d ${DB2_FENCEID_HOMEDIR} {{Db2AdmUser}} -s /bin/ksh\"",
                        "        sudo useradd -g {{Db2AdmGroup}} -G {{Db2AdmUser}} -m -d ${DB2_FENCEID_HOMEDIR} {{Db2AdmUser}} -s /bin/ksh",
                        "        RC=$?",
                        "        Check_RC",
                        "     else",
                        "        echo -e \"User {{Db2AdmUser}} already exists \\n\" | tee -a ${TEMPOUT}",
                        "        RC=0",
                        "        Check_RC",
                        "     fi",
                        "  ",
                        "     # Create user ids for the Db2 Instance Id and Fence ID",
                        "     if [[ $(id ${FENCID} | wc -l) -eq 0 ]]",
                        "     then",
                        "        ###   PROBLEM - FENCID homedirectory not correct",
                        "        echo \"sudo useradd -g {{Db2AdmGroup}} -G ${FENCID} -m -d ${DB2_FENCEID_HOMEDIR} ${FENCID} -s /bin/ksh\"",
                        "        sudo useradd -g {{Db2AdmGroup}} -G ${FENCID} -m -d ${DB2_FENCEID_HOMEDIR} ${FENCID} -s /bin/ksh",
                        "        RC=$?",
                        "        Check_RC",
                        "     else",
                        "        echo -e \"User ${FENCID} already exists \\n\" | tee -a ${TEMPOUT}",
                        "        RC=0",
                        "        Check_RC",
                        "     fi",
                        "  ",
                        "     # Change ownership of DB2 Instance Home Directory",
                        "     EXECMSG=\"change ownership of Db2 Instance Home Directory - ${DB2_INSTANCE_HOMEDIR}\"",
                        "     PrintExecBanner",
                        "     sudo chown ${INSTID}:${DB2_ADM_GROUP} ${DB2_INSTANCE_HOMEDIR}",
                        "     RC=$?",
                        "     Check_RC",
                        "  ",
                        "     # Change ownership of DB2 Fence Home Directory",
                        "     EXECMSG=\"change ownership of Db2 Fence Home Directory - ${DB2_FENCEID_HOMEDIR}\"",
                        "     PrintExecBanner",
                        "     sudo chown ${FENCID}:${DB2_ADM_GROUP} ${DB2_FENCEID_HOMEDIR}",
                        "     RC=$?",
                        "     Check_RC",
                        "  ",
                        "     # Change ownership of Data mount point path",
                        "     EXECMSG=\"change ownership of Data mount point path - ${DATA_MOUNT_POINT_PATH}\"",
                        "     PrintExecBanner",
                        "     sudo chown ${INSTID}:${DB2_ADM_GROUP} ${DATA_MOUNT_POINT_PATH}",
                        "     RC=$?",
                        "     Check_RC",
                        "  ",
                        "     # Change ownership of Backup mount point path",
                        "     EXECMSG=\"change ownership of Backup mount point path - ${BACKUP_MOUNT_POINT_PATH}\"",
                        "     PrintExecBanner",
                        "     sudo chown ${INSTID}:${DB2_ADM_GROUP} ${BACKUP_MOUNT_POINT_PATH}",
                        "     RC=$?",
                        "     Check_RC",
                        "  ",
                        "     # Change ownership of Diag mount point path",
                        "     EXECMSG=\"change ownership of Diag mount point path - ${DIAG_MOUNT_POINT_PATH}\"",
                        "     PrintExecBanner",
                        "     sudo chown ${INSTID}:${DB2_ADM_GROUP} ${DIAG_MOUNT_POINT_PATH}",
                        "     RC=$?",
                        "     Check_RC",
                        "  ",
                        "  }",
                        "  ",
                        "  ",
                        "  ",
                        "  Create_Response_File ( )",
                        "  {",
                        "  ",
                        "     #If db2_install.rsp file exists and was copied from S3 bucket, this step is not needed",
                        "  ",
                        "     if [[ ! -f ${DB2_DOWNLOAD_DIR}/db2_install.rsp ]]",
                        "     then",
                        "  ",
                        "        EXECMSG=\"Create Db2 Response file in ${DB2_DOWNLOAD_DIR}\"",
                        "        PrintExecBanner",
                        "  ",
                        "        if [[ ! -d ${DB2_DOWNLOAD_DIR} ]]",
                        "        then",
                        "           # DB2_DOWNLOAD_DIR does not exists - error",
                        "           RC=1",
                        "           Check_RC",
                        "        fi",
                        "  ",
                        "        cat <<EOF > ${DB2_DOWNLOAD_DIR}/db2_install.rsp",
                        "  *-----------------------------------------------------",
                        "  * Additional Parameters needed by the Automation Script to automate the install of Db2",
                        "  * The Automation script will rely on those items marked with ** Used by Automation Script",
                        "  * Before executing db2_setup with this response file, the Automation script will :",
                        "  *    - create/mount the filesystems/paths noted below and set permissions",
                        "  *    - substitute db2inst1 with an appropriate Intance ID/Fence ID based on the project's blockCode",
                        "  *   DB2_INSTALLPKG         = v11.5.6_linuxx64_server_dec.tar                        ** Used by Automation Script",
                        "  *   DB2_DOWNLOAD_DIR       = /products/software/udb/download                        ** Used by Automation Script",
                        "  *   DB2_INSTALLDIR        = /products/database/ibm/db2/V11.5FP0                    ** Used by Automation Script",
                        "  *   DB2_TMPDIR             = /products/tmp                                          ** Used by Automation Script",
                        "  *   DB2_LICENSE            = db2aese_c.lic                                          ** Used by Automation Script",
                        "  *   DB2_ADM_GROUP          = daldba                                                 ** Used by Automation Script",
                        "  *   DB2_PORT_NUM           = 50085                                                  ** Used by Automation Script",
                        "  *-----------------------------------------------",
                        "  *  Db2 Product Installation",
                        "  *-----------------------------------------------------",
                        "  ** The FILE keyword determines the base installation path.",
                        "  FILE                       = install_dir                                            ** Used by Automation Script",
                        "  LIC_AGREEMENT              = ACCEPT",
                        "  PROD                       = DB2_SERVER_EDITION",
                        "  INSTALL_TYPE               = TYPICAL",
                        "  *  Das properties",
                        "  *-----------------------------------------------",
                        "  DAS_CONTACT_LIST       = LOCAL",
                        "  *-----------------------------------------------",
                        "  *  Installed Languages",
                        "  *-----------------------------------------------",
                        "  LANG                       = EN",
                        "  INSTALL_TSAMP              = NO                      ** NO - not supported in Cloud (AWS, etc)",
                        "  * By supplying this INSTANCE information, db2_setup will create userids/groups for the Instance ID and Fence ID",
                        "  INSTANCE                   = DB2_INST",
                        "  DB2_INST.NAME              = db2inst1                ** real name of the instance    ** Used by Automation Script",
                        "  DB2_INST.GROUP_NAME        = db2sysadm                                                  ** Used by Automation Script",
                        "  DB2_INST.HOME_DIRECTORY    = /products/database/db2/admin                            ** Used by Automation Script",
                        "  DB2_INST.AUTOSTART         = YES                     ** YES or NO",
                        "  DB2_INST.START_DURING_INSTALL = NO                   ** YES or NO",
                        "  DB2_INST.SVCENAME          = db2c_db2inst1           ** BLANK or char(14).",
                        "  DB2_INST.PORT_NUMBER       = portnum                 ** 1024 - 65535",
                        "  DB2_INST.TYPE              = ESE                     ** ESE WSE STANDALONE CLIENT",
                        "  DB2_INST.AUTHENTICATION    = SERVER                  ** SERVER  SERVER_ENCRYPT       ** Used by Automation Script",
                        "  DB2_INST.FENCED_USERNAME   = db2fenc1                ** char(8)                      ** Used by Automation Script",
                        "  DB2_INST.FENCED_GROUP_NAME = db2fenc1                ** char(30)                     ** Used by Automation Script",
                        "  DB2_INST.FENCED_HOME_DIRECTORY = /products/database/db2/db2fenc1 ** char(64)         ** Used by Automation Script",
                        "  DB2_INST.DFTDBPATH         = /products/database/db2/data   ** any valid path         ** Used by Automation Script",
                        "  DB2_INST.DIAGPATH          = /products/database/db2/diag   ** BLANK or char(215)     ** Used by Automation Script",
                        "  DB2_INST.INSTANCE_MEMORY   = AUTOMATIC               ** AUTOMATIC or a number in range [0, 68719476736]",
                        "  DB2_INST.HEALTH_MON        = OFF                     ** default is ON; ON or OFF",
                        "  DB2_INST.SYSADM_GROUP      = db2sysadm               ** BLANK or char(30)",
                        "  DB2_INST.FEDERATED         = YES",
                        "  DB2_INST.DB2COMM           = TCPIP",
                        "EOF",
                        "  ",
                        "        RC=$?",
                        "        Check_RC",
                        "     fi",
                        "  ",
                        "  }",
                        "  ",
                        "  ",
                        "  ",
                        "  UntarBinaries ( )",
                        "  {",
                        "  ",
                        "     CleanUpTemp",
                        "  ",
                        "     if [[ ! -d ${DB2_DOWNLOAD_DIR} ]]",
                        "     then",
                        "        # Db2 Install Directory does not exist - error",
                        "        EXECMSG=\"Db2 Install Directory Check\"",
                        "        PrintExecBanner",
                        "        RC=1",
                        "        Check_RC",
                        "     fi",
                        "  ",
                        "     EXECMSG=\"untar Db2 Install binary files \"",
                        "     PrintExecBanner",
                        "  ",
                        "     cd ${DB2_DOWNLOAD_DIR}",
                        "  ",
                        "     sudo tar -xf ${DB2_INSTALLPKG}",
                        "     RC=$?",
                        "     Check_RC",
                        "  ",
                        "  }",
                        "  ",
                        "  ",
                        "  ",
                        "  SystemdSetup ()",
                        "  {",
                        "  ",
                        "  EXECMSG=\"Systemd setup for automating start/shutdown of Db2 Instance\"",
                        "  PrintExecBanner",
                        "  ",
                        "  cat <<EOF > /etc/systemd/system/${INSTID}.service",
                        "  # Invoking UDB scripts to start/shutdown Instances defined on system",
                        "  # and starts Listener",
                        "  [Unit]",
                        "  Description=Systemd Service for UDB instance ${INSTID}",
                        "  After=network-online.target remote-fs.target local-fs.target",
                        "  Requires=network-online.target remote-fs.target local-fs.target",
                        "  ",
                        "  [Service]",
                        "  User=${INSTID}",
                        "  Group={{Db2AdmGroup}}",
                        "  Type=forking",
                        "  SyslogIdentifier=${INSTID}-service",
                        "  TimeoutStartSec=5min",
                        "  TimeoutStopSec=5min",
                        "  Environment=\"HOME={{Db2InstanceHomedir}}\"",
                        "  ExecStart={{Db2ScriptsFolderLocalDownloadPath}}startup_udb.sh",
                        "  ExecStop={{Db2ScriptsFolderLocalDownloadPath}}shutdown_udb.sh",
                        "  ",
                        "  [Install]",
                        "  WantedBy=multi-user.target",
                        "  ",
                        "EOF",
                        "  sudo systemctl daemon-reload",
                        "  sudo systemctl enable ${INSTID}.service",
                        "  sudo systemctl start ${INSTID}.service",
                        "  }",
                        "  ",
                        "  RestrictSSH ()",
                        "  {",
                        "  ",
                        "  EXECMSG=\"ssh restriction\"",
                        "  PrintExecBanner",
                        "  sudo authselect select sssd with-pamaccess with-mkhomedir --force",
                        "  cat <<EOF >> /etc/security/access.conf",
                        "+ : root : ALL",
                        "+ : pam_opmiimdbaudbl : ALL",
                        "+ : ${INSTID} {{Db2AdmGroup}} ssm-user : ALL",
                        "- : ALL : ALL",
                        "EOF",
                        "  sudo grep -v pam_access.so /etc/pam.d/system-auth > /etc/pam.d/db2",
                        "  }",
                        "  Install_Db2 ( )",
                        "  {",
                        "  ",
                        "     # Create Db2 install Directory",
                        "  ",
                        "     EXECMSG=\"create ${DB2_INSTALLDIR}\"",
                        "     PrintExecBanner",
                        "  ",
                        "     if [[ ! -d ${DB2_INSTALLDIR} ]]",
                        "     then",
                        "        sudo mkdir -p ${DB2_INSTALLDIR}",
                        "        RC=$?",
                        "        Check_RC",
                        "     else",
                        "        RC=0",
                        "        Check_RC",
                        "  fi",
                        "  ",
                        "     # Create Db2 TMP Directory",
                        "  ",
                        "     EXECMSG=\"create ${DB2_TMPDIR}\"",
                        "     PrintExecBanner",
                        "  ",
                        "     if [[ ! -d ${DB2_TMPDIR} ]]",
                        "     then",
                        "        sudo mkdir -p ${DB2_TMPDIR}",
                        "        RC=$?",
                        "        Check_RC",
                        "     else",
                        "        RC=0",
                        "        Check_RC",
                        "  fi",
                        "  ",
                        "     # Change ownership of DB2 TMP Directory",
                        "     EXECMSG=\"change ownership of Db2 TMP Directory - ${DB2_TMPDIR}\"",
                        "     PrintExecBanner",
                        "     sudo chown root:${DB2_ADM_GROUP} ${DB2_TMPDIR}",
                        "     RC=$?",
                        "     Check_RC",
                        "  ",
                        "     # Change rights for Db2 TMP Directory",
                        "     EXECMSG=\"change rights of Db2 TMP Directory - ${DB2_TMPDIR}\"",
                        "     PrintExecBanner",
                        "     # sudo chmod o+rwx ${DB2_TMPDIR}",
                        "     sudo chmod a+rwx ${DB2_TMPDIR}",
                        "     sudo chmod ug+rwx ${DATA_MOUNT_POINT_PATH}",
                        "     sudo chmod ug+rwx ${BACKUP_MOUNT_POINT_PATH}",
                        "     sudo chmod ug+rwx ${DIAG_MOUNT_POINT_PATH}",
                        "     # sudo chmod a+rwx /products/tmp",
                        "  ",
                        "     RC=$?",
                        "     Check_RC",
                        "  ",
                        "  ",
                        "     #sudo su \u00e2\u20ac\u201c {{Db2AdmGroup}} -c \"export DB2TMPDIR=${DB2_TMPDIR}; pimsu ${DB2_DOWNLOAD_DIR}/server_dec/db2setup -r ${DB2_DOWNLOAD_DIR}/${DB2_INSTALLER_RESPONSE_FILE_NAME}\"",
                        "  ",
                        "     EXECMSG=\"find db2setup command location\"",
                        "     PrintExecBanner",
                        "  ",
                        "     #find the db2setup command undert DB2_DOWNLOAD_DIR",
                        "     DB2_SETUP=$(find ${DB2_DOWNLOAD_DIR} -name db2setup | head -1 )",
                        "     RC=$?",
                        "     Check_RC",
                        "  ",
                        "  ",
                        "  ",
                        "     EXECMSG=\"append cloudwatch config \"",
                        "     PrintExecBanner",
                        "  ",
                        "  cat << EOF > /opt/aws/amazon-cloudwatch-agent/etc/custom-cwagent-config.json",
                        "{",
                        "  \"logs\": {",
                        "    \"logs_collected\": {",
                        "      \"files\": {",
                        "        \"collect_list\": [",
                        "          {",
                        "            \"file_path\": \"{{Db2Tmpdir}}/DB2_Alert.log\",",
                        "            \"log_group_name\": \"cw-${PRODUCT_BLOCK_CODE_CFT_PARAM_VALUE}-db2alertlog\",",
                        "            \"retention_in_days\": {{LogRetention}},",
                        "            \"log_stream_name\": \"{instance_id}\"",
                        "          }",
                        "        ]",
                        "      }",
                        "    }",
                        "  }",
                        "}",
                        "EOF",
                        "  ",
                        "     sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a append-config -m ec2 -s -c file:\"/opt/aws/amazon-cloudwatch-agent/etc/custom-cwagent-config.json\"",
                        "     RC=$?",
                        "     Check_RC",
                        "  ",
                        "     # Run db2_setup using the Db2 Response file",
                        "     EXECMSG=\"run db2setup ${DB2_SETUP} using ${DB2_INSTALLER_RESPONSE_FILE_NAME} response file\"",
                        "     PrintExecBanner",
                        "     export DB2TMPDIR=${DB2_TMPDIR}",
                        "     # sudo ${DB2_DOWNLOAD_DIR}/${DB2_SETUP} -r ${DB2_DOWNLOAD_DIR}/${DB2_INSTALLER_RESPONSE_FILE_NAME}",
                        "     # echo \"sudo ${DB2_SETUP} -r ${DB2_DOWNLOAD_DIR}/${DB2_INSTALLER_RESPONSE_FILE_NAME}\"",
                        "     #sudo ${DB2_SETUP} -r ${DB2_DOWNLOAD_DIR}/${DB2_INSTALLER_RESPONSE_FILE_NAME}",
                        "     sudo sh -c \"export DB2TMPDIR=${DB2_TMPDIR} ; ${DB2_SETUP} -r ${DB2_DOWNLOAD_DIR}/${DB2_INSTALLER_RESPONSE_FILE_NAME}\"",
                        "  ",
                        "     RC=$?",
                        "     Check_RC",
                        "  ",
                        "  ",
                        "     EXECMSG=\"install Db2 License \"",
                        "     PrintExecBanner",
                        "     sudo ${DB2_INSTANCE_HOMEDIR}/sqllib/adm/db2licm -a ${DB2_DOWNLOAD_DIR}/${DB2_LICENSE}",
                        "     RC=$?",
                        "     Check_RC",
                        "  ",
                        "     EXECMSG=\"start DB2 \"",
                        "     PrintExecBanner",
                        "     sudo su - ${INSTID} -c \"db2start\"",
                        "     RC=$?",
                        "     Check_RC",
                        "  ",
                        "     EXECMSG=\"create default database \"",
                        "     PrintExecBanner",
                        "     DEFAULT_DB_NAME=d${LAST_4_LETTERS_OF_BLOCK_CODE}${ENVIRONMENT_ABBRIVIATION}{{DBNumber}}",
                        "     echo \" Default database name will be: ${DEFAULT_DB_NAME}\"",                        
                        "     echo \"sudo su - ${INSTID} -c \"db2 create db ${DEFAULT_DB_NAME} USING CODESET {{CodePage}} TERRITORY {{Territory}}\"\"",
                        "     sudo su - ${INSTID} -c \"db2 create db ${DEFAULT_DB_NAME} USING CODESET {{CodePage}} TERRITORY {{Territory}}\"",
                        "     RC=$?",
                        "     Check_RC",
                        "  ",
                        "     EXECMSG=\"set timezone \"",
                        "     PrintExecBanner",
                        "     sudo -H -u ${INSTID} bash -c 'echo \"export TZ={{DatabaseTimezone}}\">>\"${HOME}/.profile\"'",
                        "     sudo -H -u ${INSTID} bash -c 'echo \"export TZ={{DatabaseTimezone}}\">>\"${HOME}/sqllib/userprofile\"'",
                        "     RC=$?",
                        "     Check_RC",
                        "  ",
                        "  }",
                        "  ",
                        "  ",
                        "  ",
                        "  ",
                        "  ########",
                        "  ## MAIN",
                        "  ########",
                        "  ",
                        "  ",
                        "  #Initialize LOGFILE",
                        "     echo -e \"Execution start time : \\c\" | tee ${LOGFILE}",
                        "     date | tee -a ${LOGFILE}",
                        "  ",
                        "  ",
                        "  ",
                        "  #Install/Update needed Linux packages",
                        "     for PKG in pam.i686 kernel-devel gcc-c++ nfs-utils jq net-tools",
                        "     do",
                        "        Yum_Install",
                        "     done",
                        "        Yum_Update",
                        "  ",
                        "  ",
                        "  ",
                        "  #Retrieve all necessary CloudFormation Variables",
                        "     Get_CF_Variables",
                        "  ",
                        "  ",
                        "  #Set Db2 Variables based on CF variables",
                        "     INSTID=\"${LAST_4_LETTERS_OF_BLOCK_CODE}u${ENVIRONMENT_ABBRIVIATION}{{DBNumber}}\"",
                        "     FENCID=\"${LAST_4_LETTERS_OF_BLOCK_CODE}f${ENVIRONMENT_ABBRIVIATION}{{DBNumber}}\"",
                        "  ",
                        "  ",
                        "  ",
                        "  #Download Db2 Install Binary and Response files from S3 Bucket",
                        "     # SALIM - CONVERT THIS to get from Stack Parameter",
                        "     DB2_INSTALL_ARTIFACTS_S3_BUCKET=\"{{Db2InstallArtifactsS3Bucket}}\"",
                        "     DB2_INSTALLER_BINARY_FILE_S3_KEY_NAME=\"{{Db2InstallerBinaryFileS3KeyName}}\"",
                        "     DB2_INSTALLER_BINARY_FILE_ON_S3=\"{{Db2InstallerBinaryFileOnS3}}\"",
                        "  ",
                        "     DB2_INSTALLER_LICENSE_FILE_S3_KEY_NAME=\"{{Db2InstallerLicenseFileS3KeyName}}\"",
                        "     DB2_INSTALLER_LICENSE_FILE_NAME=\"{{Db2InstallerLicenseFileName}}\"",
                        "  ",
                        "     DB2_INSTALLER_RESPONSE_FILE_S3_KEY_NAME=\"{{Db2InstallerResponseFileS3KeyName}}\"",
                        "     DB2_INSTALLER_RESPONSE_FILE_NAME=\"{{Db2InstallerResponseFileName}}\"",
                        "  ",
                        "     DB2_INSTALLPKG=${DB2_INSTALLER_BINARY_FILE_ON_S3}",
                        "     DB2_DOWNLOAD_DIR=\"{{Db2DownloadDir}}\"",
                        "     DB2_INSTALLDIR=\"{{Db2Installdir}}\"",
                        "     DB2_TMPDIR=\"{{Db2Tmpdir}}\"",
                        "     DB2_LICENSE=${DB2_INSTALLER_LICENSE_FILE_NAME}",
                        "     DB2_ADM_GROUP=\"{{Db2AdmGroup}}\"",
                        "     DB2_PORT_NUM=\"{{Db2PortNum}}\"",
                        "  ",
                        "     DB2_INSTANCE_HOMEDIR=\"{{Db2InstanceHomedir}}\"",
                        "     DB2_FENCEID_HOMEDIR=\"{{Db2FenceidHomedir}}/${FENCID}\"",
                        "  ",
                        "     ADMIN_MOUNT_POINT_PATH=\"{{AdminMountPointPath}}\"",
                        "     DATA_MOUNT_POINT_PATH=\"{{DataMountPointPath}}\"",
                        "     BACKUP_MOUNT_POINT_PATH=\"{{BackupMountPointPath}}\"",
                        "     DIAG_MOUNT_POINT_PATH=\"{{DiagMountPointPath}}\"",
                        "  ",
                        "     # Set name of Db2 Response/Parameter file to download",
                        "     #DB2_RESPONSE=\"db2_install.rsp\"",
                        "  ",
                        "     GetDb2ResponseFile",
                        "  ",
                        "     CopyDb2Binaries",
                        "  ",
                        "  ",
                        "  ",
                        "  #If db2_install.rsp file was not downloaded, this will create a response file",
                        "     #Create_Response_File",
                        "  ",
                        "  ",
                        "  ",
                        "  #Only needed for EFS mounts.  Leaving in so that NFS is available.",
                        "     Start_NFS",
                        "  ",
                        "  ",
                        "  ",
                        "  #Un-tar Db2 Install Binary Files",
                        "     UntarBinaries",
                        "  ",
                        "  ",
                        "  #Create DB2 related users",
                        "     CreateUserIDs",
                        "  ",
                        "  ",
                        "  #Install Db2 and create Db2 Instance (from response file)",
                        "     Install_Db2",
                        "  ",
                        "  ",
                        "  #systemd setup for automating start/shutdown of Db2 Instance",
                        "     SystemdSetup",
                        "  ",
                        "  ",
                        "  #ssh restriction",
                        "     RestrictSSH",
                        "  ",
                        "     echo -e \"Execution stop time : \\c\" | tee -a ${LOGFILE}",
                        "     date | tee -a ${LOGFILE}"
                      ],
                  },
              },
              {
                "action": "aws:runShellScript",
                "name": "makescriptsexecutable",
                "inputs": {
                  "runCommand": [
                    "#!/bin/bash",
                    "echo \"Changing permissions of scripts and template folder\"", 
                    "sudo chown -R {{Db2AdmGroup}}:{{Db2AdmGroup}} {{Db2ScriptsFolderLocalDownloadPath}} {{Db2TemplatesFolderLocalDownloadPath}}",
                    "sudo chmod 750 {{Db2ScriptsFolderLocalDownloadPath}} {{Db2TemplatesFolderLocalDownloadPath}}",
                    "sudo chmod -R 454 {{Db2ScriptsFolderLocalDownloadPath}}/*",
                    "sudo chmod -R 640 {{Db2TemplatesFolderLocalDownloadPath}}/*",
                    "echo \"Changed permissions of scripts and template folder\"", 

                  ]
                }
              },
            ],
        }
