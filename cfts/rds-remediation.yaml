AWSTemplateFormatVersion: 2010-09-09
Description: Template for Deltas RDS Remediation of Cluster and Instance

Parameters:

  DeletionProtectionRemediationState:
    Type: String
    Description: is remediation on(true) or off(false).
    Default: false
    AllowedValues:
      - true
      - false

Resources:

  ConfigRuleForDeletionProtection:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: rds-instance-deletion-protection-temp-rule
      Description: Checks if an Amazon Relational Database Service (Amazon RDS) cluster has deletion protection enabled. This rule is NON_COMPLIANT if an RDS cluster does not have deletion protection enabled.
      Scope:
        ComplianceResourceTypes:
          - "AWS::RDS::DBInstance"
      Source:
        Owner: AWS
        SourceIdentifier: "RDS_INSTANCE_DELETION_PROTECTION_ENABLED"


  SSMAssumeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - "ssm.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Description: "IAM Role for SSM Automation for RDS config rules remediation"
      RoleName: "delegate-admin-ssm-automation-rds-config-remediation-temp"
      ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonRDSFullAccess
          - arn:aws:iam::aws:policy/service-role/AWSConfigRole
      PermissionsBoundary:
        Fn::Sub: arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/cft-developer-boundary-policy

  DeletionProtectionRemediation:
    Type: AWS::Config::RemediationConfiguration
    Properties:
      Automatic: !Ref DeletionProtectionRemediationState
      ConfigRuleName: !Ref ConfigRuleForDeletionProtection
      MaximumAutomaticAttempts: 3
      RetryAttemptSeconds: 30
      Parameters:
        AutomationAssumeRole:
          StaticValue:
            Values:
              - !GetAtt SSMAssumeRole.Arn
        ResourceID:
          ResourceValue:
            Value: RESOURCE_ID
      TargetId: !Ref SSMRemediationDocument
      TargetType: SSM_DOCUMENT


  SSMRemediationDocument:
    Type: AWS::SSM::Document
    Properties:
      Name: rds-config-remediation-document-python1
      DocumentType: Automation
      Content:
        description: |-
          # config-remediation-remove-rds-instance
          This automation document is passed a resource id of a non-compliant RDS instance and then deletes the RDS instance.
          ## Automation Steps
          1. Use the resource id of a non-compliant instance to retrieve the db identifier of the RDS instance or Cluster
          2. Modify the DB Instance  or Cluster to ensure that deletion protection is set to false
          3. Use the DB identifier to delete the non-compliant RDS instance  or Cluster
        schemaVersion: '0.3'
        assumeRole: '{{AutomationAssumeRole}}'
        parameters:
          ResourceID:
            type: String
            description: The Resource ID of the RDS instance to delete
          AutomationAssumeRole:
            type: String
        mainSteps:
        - name: DeleteRDSInstancesAndCluster
          action: 'aws:executeScript'
          inputs:
            Runtime: python3.7
            Handler: script_handler
            Script: |-
              def script_handler(events, context):
                import json, boto3, botocore
                AWS_RDS_CLIENT = boto3.client('rds')
                response = AWS_RDS_CLIENT.describe_db_instances(
                    Filters=[
                    {
                        'Name': 'dbi-resource-id',
                        'Values': [events['resourceid']]
                    }]
                )
                DB_IDENTIFIER = response['DBInstances'][0]['DBInstanceIdentifier']
                ENGINE = response['DBInstances'][0]['Engine']
                if ENGINE in ["aurora","aurora-mysql","aurora-postgresql"]:
                    CLUSTER_IDENTIFIER = response['DBInstances'][0]['DBClusterIdentifier']
                    response = AWS_RDS_CLIENT.modify_db_cluster(
                        DBClusterIdentifier=CLUSTER_IDENTIFIER,
                        DeletionProtection=False
                    )
                    response = AWS_RDS_CLIENT.describe_db_clusters(
                        DBClusterIdentifier=CLUSTER_IDENTIFIER
                    )
                    #DELETE READ INSTANCES
                    for member in response['DBClusters'][0]['DBClusterMembers']:
                        if member['IsClusterWriter'] == False:
                            response_del_r = AWS_RDS_CLIENT.delete_db_instance(
                                DBInstanceIdentifier=member['DBInstanceIdentifier'],
                                SkipFinalSnapshot=True,
                                DeleteAutomatedBackups=True
                            )
                    #DELETE READ/WRITE INSTANCES
                    for member in response['DBClusters'][0]['DBClusterMembers']:
                        if member['IsClusterWriter'] == True:
                            response_del_w = AWS_RDS_CLIENT.delete_db_instance(
                                DBInstanceIdentifier=member['DBInstanceIdentifier'],
                                SkipFinalSnapshot=True,
                                DeleteAutomatedBackups=True
                            )
                    #DELETE CLUSTER
                    response = AWS_RDS_CLIENT.delete_db_cluster(
                        DBClusterIdentifier=CLUSTER_IDENTIFIER,
                        SkipFinalSnapshot=True
                    )
                else:
                    response = AWS_RDS_CLIENT.modify_db_instance(
                        DBInstanceIdentifier=DB_IDENTIFIER,
                        DeletionProtection=False
                    )
                    response = AWS_RDS_CLIENT.delete_db_instance(
                        DBInstanceIdentifier=DB_IDENTIFIER,
                        SkipFinalSnapshot=True,
                        DeleteAutomatedBackups=True
                    )
            InputPayload:
              resourceid: '{{ResourceID}}'
